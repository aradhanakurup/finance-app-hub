// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Lender Management
model Lender {
  id                      String   @id @default(cuid())
  name                    String   @unique
  logo                    String?
  apiEndpoint            String
  apiKey                 String
  isActive               Boolean  @default(true)
  approvalRate           Float    @default(0.0)
  avgResponseTime        Int      @default(0) // in minutes
  minCreditScore         Int      @default(0)
  maxLoanAmount          Float    @default(0)
  minLoanAmount          Float    @default(0)
  processingFee          Float    @default(0)
  commissionRate         Float    @default(0) // percentage
  supportedVehicleTypes  String   // JSON string for SQLite
  supportedEmploymentTypes String // JSON string for SQLite
  webhookUrl             String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  applications           LenderApplication[]
  analytics              LenderAnalytics[]
}

// User Authentication
model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  password              String
  firstName             String
  lastName              String
  phone                 String?
  isEmailVerified       Boolean  @default(false)
  emailVerificationToken String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  lastLoginAt           DateTime?
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  applications          Application[]
  profile               Customer?
}

// Customer Information
model Customer {
  id                    String   @id @default(cuid())
  userId                String   @unique
  firstName             String
  lastName              String
  email                 String
  phone                 String
  aadhaar               String?  @unique
  pan                   String?  @unique
  dateOfBirth           DateTime?
  addressStreet         String?
  addressCity           String?
  addressState          String?
  addressPincode        String?
  employmentType        String?
  companyName           String?
  designation           String?
  monthlyIncome         Float?
  experience            Int? // in years
  creditScore           Int?
  existingEmis          Float?
  bankName              String?
  accountNumber         String?
  ifscCode              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Vehicle Information
model Vehicle {
  id                    String   @id @default(cuid())
  applicationId         String   @unique
  make                  String
  model                 String
  year                  Int
  variant               String
  price                 Float
  downPayment           Float
  loanAmount            Float
  tenure                Int // in months
  dealerName            String
  dealerId              String
  dealerLocation        String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  application           Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

// Document Management
model Document {
  id                    String   @id @default(cuid())
  applicationId         String
  documentType          String
  fileName              String
  filePath              String
  fileSize              Int
  mimeType              String
  uploadStatus          String   @default("PENDING")
  verificationStatus    String   @default("PENDING")
  uploadedAt            DateTime @default(now())
  verifiedAt            DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  application           Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

// Main Application
model Application {
  id                    String   @id @default(cuid())
  userId                String
  status                String   @default("PENDING")
  submittedAt           DateTime @default(now())
  approvedAt            DateTime?
  rejectedAt            DateTime?
  rejectionReason       String?
  approvedAmount        Float?
  interestRate          Float?
  processingFee         Float?
  totalAmount           Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle               Vehicle?
  documents             Document[]
  lenderApplications    LenderApplication[]
}

// Lender Application Relationship
model LenderApplication {
  id                    String   @id @default(cuid())
  applicationId         String
  lenderId              String
  status                String   @default("PENDING")
  submittedAt           DateTime @default(now())
  respondedAt           DateTime?
  approvedAmount        Float?
  interestRate          Float?
  processingFee         Float?
  rejectionReason       String?
  responseTime          Int? // in minutes
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  application           Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  lender                Lender @relation(fields: [lenderId], references: [id], onDelete: Cascade)

  @@unique([applicationId, lenderId])
}

// Lender Analytics
model LenderAnalytics {
  id                    String   @id @default(cuid())
  lenderId              String
  date                  DateTime
  totalApplications     Int      @default(0)
  approvedApplications  Int      @default(0)
  rejectedApplications  Int      @default(0)
  avgResponseTime       Int      @default(0) // in minutes
  avgInterestRate       Float    @default(0)
  totalCommission       Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  lender                Lender @relation(fields: [lenderId], references: [id], onDelete: Cascade)

  @@unique([lenderId, date])
}

// System Configuration
model SystemConfig {
  id                    String   @id @default(cuid())
  key                   String   @unique
  value                 String
  description           String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Dealer Management
model Dealer {
  id                    String   @id @default(cuid())
  businessName          String
  email                 String   @unique
  phone                 String
  address               String
  gstNumber             String   @unique
  panNumber             String   @unique
  registrationNumber    String   @unique
  businessType          String
  yearsInBusiness       Int
  monthlyApplications   Int      @default(0)
  approvalRate          Float    @default(0.0)
  totalCommission       Float    @default(0.0)
  subscriptionTier      String   @default("basic")
  isActive              Boolean  @default(true)
  isApproved            Boolean  @default(false)
  approvedAt            DateTime?
  approvedBy            String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  documents             DealerDocument[]
}

// Dealer Documents
model DealerDocument {
  id                    String   @id @default(cuid())
  dealerId              String
  documentType          String
  fileName              String
  filePath              String
  fileSize              Int
  mimeType              String
  uploadStatus          String   @default("PENDING")
  verificationStatus    String   @default("PENDING")
  uploadedAt            DateTime @default(now())
  verifiedAt            DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  dealer                Dealer @relation(fields: [dealerId], references: [id], onDelete: Cascade)
}

// Audit Log
model AuditLog {
  id                    String   @id @default(cuid())
  userId                String?
  userType              String? // "admin", "dealer", "customer"
  action                String
  entityType            String?
  entityId              String?
  oldValues             String? // JSON string
  newValues             String? // JSON string
  ipAddress             String?
  userAgent             String?
  createdAt             DateTime @default(now())
}
